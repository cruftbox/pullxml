#include <Ethernet.h>
#include <SPI.h> 

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; //physical mac address
EthernetClient client;
IPAddress server(50,23,120,99); // FavStar.fm

int redPin = 12;    // represents no change
int greenPin = 11;  // represents change to XML file
int beanPin = 10;   // represents change and fires jelly bean relay

unsigned long lastAttemptTime = 0;            // last time you connected to the server, in milliseconds

String incomingString;
String previousString;

void setup() {
  // initialize the digital pin as an output.
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(beanPin, OUTPUT);
  // start the serial library:
  Serial.begin(9600);
  // start the Ethernet connection:
Ethernet.begin(mac);
  // give the Ethernet shield a second to initialize:
  delay(1000);
  
}

// The idea is to the compare the last string from the site to the new string from the site to see if it changed

void loop() {
	
	previousString = incomingString;
		
	delay(30000);
	
	Serial.println("connecting...");

  // if you get a connection, report back via serial:
  if (client.connect(server, 80)) {
    Serial.println("connected");
    Serial.println("My address:");
    Serial.println(Ethernet.localIP());
    } 
  else {
    // if you didn't get a connection to the server:
    Serial.println("connection failed");
  }
	Serial.println("Requesting new string");
	
	// Make a HTTP request:
    	client.println("GET /users/Cruftbox/rss HTTP/1.0");
    	client.println();
    // note the time of this connect attempt:
    	lastAttemptTime = millis();
    
    char incomingByte;
	//	String incomingString;

	// Check if there's incoming serial data.
		if (client.available() > 0) {
		while( client.available() > 0 ) {
			incomingByte = client.read();
		incomingString += (char)incomingByte;
		}
		
	// once data is grabbed, stop the client:
		Serial.println("Disconnecting");
	//	Serial.println(incomingString);
		client.stop();
    }
	Serial.println("Post initial if");
    Serial.println(incomingString);
    

		if( incomingString.equals( previousString ) ) {
			Serial.println("Strings are the same");
			Serial.println("incomingString");
			Serial.println(incomingString);
			Serial.println("previousString");
			Serial.println(previousString);
			} 
		else {
			Serial.println("Strings are the different");
			// Do cool stuff here
			Serial.println(incomingString);
		}
	}

// routines that handle board output circuits aka cool stuff
		
void nochange() {
	digitalWrite(redPin, HIGH);   // set the red LED on
    digitalWrite(greenPin, LOW);
    digitalWrite(beanPin, LOW);
	}
	
void newfav() {
	digitalWrite(redPin, LOW);   // turn on green LED and fire relay
	digitalWrite(greenPin, HIGH);
	digitalWrite(beanPin, HIGH);
	delay(3000);              // wait for beans to drop
	digitalWrite(redPin, HIGH);   // turn on red LED and close relay
    digitalWrite(greenPin, LOW);
    digitalWrite(beanPin, LOW);
	}




